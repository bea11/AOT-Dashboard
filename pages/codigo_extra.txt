def update_output(list_of_contents, list_of_names, list_of_dates):
    if list_of_contents is not None:
        print("ola"),
        children = []
        for content, name, date in zip(list_of_contents, list_of_names, list_of_dates):
            content_type, content_string = content.split(',')
            decoded = base64.b64decode(content_string)
            print("recebi"),
            try:
                if 'fits' in name:
                  
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".fits") as temp_file:
                       
                        temp_file.write(decoded)
                        temp_file.close()
                        print("entrei no fits"),
            
                        
                       
                        sys = aotpy.AOSystem.read_from_file(temp_file.name)
                        commands = sys.loops[0].commands.data
                        pix = sys.wavefront_sensors[0].detector.pixel_intensities.data
                        print(len(sys.wavefront_sensors))
                        print(pix.shape)
                        frame = pix[0]
                        mean = pix.sum()/ pix.shape[0]
                        fig = go.Figure(data=go.Heatmap(z=commands[:100]))
                        children.append(dcc.Graph(figure=fig))

             
                    os.unlink(temp_file.name)
            except Exception as e:
                children.append(html.Div(['There was an error processing this file.']))
        return children
    else:
        return html.Div("No file uploaded")


ANTIGO fits
def parse_contents(contents, filename):
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    try:
        if 'fits' in filename:
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(
                io.StringIO(decoded.decode('utf-8')))
            return html.Div([
                'Successfully uploaded FITS file: {}'.format(filename)
            ])
        else:
            return html.Div([
                'The file type is not supported: {}'.format(filename)
            ])
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])